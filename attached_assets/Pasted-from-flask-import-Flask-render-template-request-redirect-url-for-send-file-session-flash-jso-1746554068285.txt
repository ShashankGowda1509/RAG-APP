from flask import Flask, render_template, request, redirect, url_for, send_file, session, flash, jsonify
import sqlite3
import io
import bcrypt
import pypandoc
from flask_mail import Mail, Message
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
from datetime import datetime, timedelta
import pdfplumber
from langchain.schema import Document
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.retrievers import BM25Retriever
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
from langchain_ollama import ChatOllama

app = Flask(__name__)
app.secret_key = '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'  # Replace with a secure key in production

# Email configuration for password reset
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'd3208230@gmail.com'
app.config['MAIL_PASSWORD'] = 'byae gtof amvm nsmm'
app.config['MAIL_DEFAULT_SENDER'] = 'd3208230@gmail.com'
mail = Mail(app)

# Serializer for generating secure tokens
serializer = URLSafeTimedSerializer(app.secret_key)

def init_db():
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS uploads (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        filename TEXT,
        file_data BLOB NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        title TEXT,
        content_delta TEXT,
        content_html TEXT,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS attachments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        filename TEXT,
        file_data BLOB,
        mimetype TEXT,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS reset_tokens (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        token TEXT,
        expiry TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS pdf_chunks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        upload_id INTEGER,
        chunk_text TEXT,
        FOREIGN KEY (upload_id) REFERENCES uploads(id)
    )''')
    conn.commit()
    conn.close()

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT username FROM users")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return render_template('index.html', users=users)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('files.db')
        c = conn.cursor()
        c.execute("SELECT id, username, password FROM users WHERE username=?", (username,))
        user = c.fetchone()
        conn.close()
        if user and bcrypt.checkpw(password.encode('utf-8'), user[2]):
            session['user_id'] = user[0]
            session['username'] = user[1]
            flash('Login successful!', 'success')
            return redirect(url_for('index'))
        flash('Invalid credentials', 'error')
        return redirect(url_for('login'))
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        try:
            conn = sqlite3.connect('files.db')
            c = conn.cursor()
            c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                      (username, hashed_password, email))
            conn.commit()
            conn.close()
            flash('Signup successful! Please login.', 'success')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username or email already exists', 'error')
            return redirect(url_for('signup'))
    return render_template('signup.html')

@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        username = request.form['username']
        conn = sqlite3.connect('files.db')
        c = conn.cursor()
        c.execute("SELECT id, email FROM users WHERE username=?", (username,))
        user = c.fetchone()
        if user:
            user_id, email = user
            token = serializer.dumps(email, salt='password-reset-salt')
            expiry = datetime.utcnow() + timedelta(minutes=2)
            c.execute("INSERT INTO reset_tokens (user_id, token, expiry) VALUES (?, ?, ?)",
                      (user_id, token, expiry))
            conn.commit()
            reset_link = url_for('reset_password', token=token, _external=True)
            msg = Message('Password Reset Code', recipients=[email])
            msg.body = f"Click the link to reset your password (valid for 2 minutes): {reset_link}"
            mail.send(msg)
        conn.close()
        flash('If an account exists with this username, a reset link has been sent to the registered email.', 'info')
        return redirect(url_for('login'))
    return render_template('forgot_password.html')

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT user_id, expiry FROM reset_tokens WHERE token=?", (token,))
    token_data = c.fetchone()
    if not token_data or datetime.utcnow() > datetime.strptime(token_data[1], '%Y-%m-%d %H:%M:%S.%f'):
        c.execute("DELETE FROM reset_tokens WHERE token=?", (token,))
        conn.commit()
        conn.close()
        flash('Invalid or expired token.', 'error')
        return redirect(url_for('forgot_password'))
    if request.method == 'POST':
        new_password = request.form['new_password']
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
        c.execute("UPDATE users SET password=? WHERE id=?", (hashed_password, token_data[0]))
        c.execute("DELETE FROM reset_tokens WHERE token=?", (token,))
        conn.commit()
        conn.close()
        flash('Password reset successful! Please login.', 'success')
        return redirect(url_for('login'))
    conn.close()
    return render_template('reset_password.html', token=token)

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('username', None)
    flash('Logged out successfully', 'success')
    return redirect(url_for('login'))

@app.route('/upload', methods=['POST'])
def upload():
    if 'user_id' not in session:
        flash('Please login to upload files', 'error')
        return redirect(url_for('login'))
    filename = request.form['filename']
    file = request.files['file']
    if file and file.filename.endswith('.pdf'):
        file_data = file.read()
        conn = sqlite3.connect('files.db')
        c = conn.cursor()
        c.execute("INSERT INTO uploads (user_id, filename, file_data) VALUES (?, ?, ?)",
                  (session['user_id'], filename, file_data))
        upload_id = c.lastrowid
        # Process PDF into chunks and store
        try:
            pdf = pdfplumber.open(io.BytesIO(file_data))
            pages = []
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    pages.append(Document(page_content=text, metadata={"page": page.page_number}))
            pdf.close()
            text_splitter = RecursiveCharacterTextSplitter(
                chunk_size=2000,
                chunk_overlap=100,
                add_start_index=True
            )
            chunked_documents = text_splitter.split_documents(pages)
            for chunk in chunked_documents:
                c.execute("INSERT INTO pdf_chunks (upload_id, chunk_text) VALUES (?, ?)",
                          (upload_id, chunk.page_content))
        except Exception as e:
            flash(f'Error processing PDF: {str(e)}', 'error')
        conn.commit()
        conn.close()
        flash('File uploaded successfully', 'success')
    else:
        flash('Only PDF files are allowed', 'error')
    return redirect(url_for('user_uploads', username=session['username']))

@app.route('/select_pdf/<int:file_id>', methods=['GET'])
def select_pdf(file_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT id FROM uploads WHERE id=? AND user_id=?", (file_id, session['user_id']))
    if c.fetchone():
        session['current_pdf_id'] = file_id
        conn.close()
        return jsonify({'success': True})
    conn.close()
    return jsonify({'error': 'File not found or access denied'}), 403

@app.route('/ask', methods=['POST'])
def ask_question():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    if 'current_pdf_id' not in session:
        return jsonify({'error': 'No PDF selected'}), 400
    data = request.get_json()
    question = data.get('question', '')
    model_type = data.get('model_type', '')
    model_name = data.get('model_name', '')
    api_key = data.get('api_key', '')
    api_base = data.get('api_base', '')
    if not question:
        return jsonify({'error': 'No question provided'}), 400
    if not model_type or not model_name:
        return jsonify({'error': 'Model type and name must be provided'}), 400
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT chunk_text FROM pdf_chunks WHERE upload_id=?", (session['current_pdf_id'],))
    chunks = [row[0] for row in c.fetchall()]
    conn.close()
    if not chunks:
        return jsonify({'error': 'No content found for the selected PDF'}), 400
    documents = [Document(page_content=chunk) for chunk in chunks]
    retriever = BM25Retriever.from_documents(documents)
    related_documents = retriever.get_relevant_documents(question, k=5)
    context = "\n\n".join([doc.page_content for doc in related_documents])
    template = """
You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.
Question: {question}
Context: {context}
Answer:
"""
    prompt = ChatPromptTemplate.from_template(template)
    if model_type == 'groq':
        if not api_key:
            return jsonify({'error': 'Groq API key is required'}), 400
        model = ChatGroq(groq_api_key=api_key, model_name=model_name)
    elif model_type == 'ollama':
        model = ChatOllama(model=model_name, base_url=api_base if api_base else "http://localhost:11434")
    else:
        return jsonify({'error': 'Invalid model type'}), 400
    chain = prompt | model
    answer = chain.invoke({"question": question, "context": context})
    return jsonify({'answer': answer.content})

@app.route('/user/<username>')
def user_uploads(username):
    if 'user_id' not in session:
        flash('Please login to view uploads', 'error')
        return redirect(url_for('login'))
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT id FROM users WHERE username=?", (username,))
    user = c.fetchone()
    if not user:
        flash('User not found', 'error')
        return redirect(url_for('index'))
    user_id = user[0]
    c.execute("SELECT id, filename FROM uploads WHERE user_id=?", (user_id,))
    files = c.fetchall()
    is_current_user = (username == session['username'])
    notes = []
    if is_current_user:
        c.execute("SELECT id, title FROM notes WHERE user_id=?", (session['user_id'],))
        notes = c.fetchall()
    conn.close()
    return render_template('user_uploads.html', username=username, files=files, notes=notes, is_current_user=is_current_user)

@app.route('/view/<int:file_id>')
def view_pdf(file_id):
    if 'user_id' not in session:
        return "Unauthorized", 401
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT file_data FROM uploads WHERE id=? AND user_id=?", (file_id, session['user_id']))
    result = c.fetchone()
    conn.close()
    if result:
        return send_file(io.BytesIO(result[0]), mimetype='application/pdf')
    return "File not found or access denied", 403

@app.route('/upload_attachment', methods=['POST'])
def upload_attachment():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    file = request.files['file']
    if file:
        filename = file.filename
        file_data = file.read()
        mimetype = file.mimetype
        conn = sqlite3.connect('files.db')
        c = conn.cursor()
        c.execute("INSERT INTO attachments (user_id, filename, file_data, mimetype) VALUES (?, ?, ?, ?)",
                  (session['user_id'], filename, file_data, mimetype))
        conn.commit()
        attachment_id = c.lastrowid
        conn.close()
        url = url_for('get_attachment', attachment_id=attachment_id, _external=True)
        return jsonify({'url': url})
    return jsonify({'error': 'No file uploaded'}), 400

@app.route('/attachment/<int:attachment_id>')
def get_attachment(attachment_id):
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT file_data, mimetype FROM attachments WHERE id=? AND user_id=?", (attachment_id, session['user_id']))
    result = c.fetchone()
    conn.close()
    if result:
        return send_file(io.BytesIO(result[0]), mimetype=result[1])
    return "Attachment not found", 404

@app.route('/notes', methods=['GET'])
def get_notes():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT id, title FROM notes WHERE user_id=?", (session['user_id'],))
    notes = c.fetchall()
    conn.close()
    return jsonify([{'id': note[0], 'title': note[1]} for note in notes])

@app.route('/note/<int:note_id>', methods=['GET'])
def get_note(note_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT content_delta FROM notes WHERE id=? AND user_id=?", (note_id, session['user_id']))
    result = c.fetchone()
    conn.close()
    if result:
        return jsonify({'content': result[0]})
    return jsonify({'error': 'Note not found'}), 404

@app.route('/note', methods=['POST'])
def create_note():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    title = request.json['title']
    content_delta = request.json['content_delta']
    content_html = request.json['content_html']
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("INSERT INTO notes (user_id, title, content_delta, content_html) VALUES (?, ?, ?, ?)",
              (session['user_id'], title, content_delta, content_html))
    conn.commit()
    note_id = c.lastrowid
    conn.close()
    return jsonify({'id': note_id, 'title': title})

@app.route('/note/<int:note_id>', methods=['PUT'])
def update_note(note_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    title = request.json['title']
    content_delta = request.json['content_delta']
    content_html = request.json['content_html']
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("UPDATE notes SET title=?, content_delta=?, content_html=? WHERE id=? AND user_id=?",
              (title, content_delta, content_html, note_id, session['user_id']))
    conn.commit()
    conn.close()
    return jsonify({'success': True})

@app.route('/note/<int:note_id>', methods=['DELETE'])
def delete_note(note_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("DELETE FROM notes WHERE id=? AND user_id=?", (note_id, session['user_id']))
    conn.commit()
    conn.close()
    return jsonify({'success': True})

@app.route('/download_note/<int:note_id>')
def download_note(note_id):
    if 'user_id' not in session:
        flash('Please login to download notes', 'error')
        return redirect(url_for('login'))
    conn = sqlite3.connect('files.db')
    c = conn.cursor()
    c.execute("SELECT title, content_html FROM notes WHERE id=? AND user_id=?", (note_id, session['user_id']))
    result = c.fetchone()
    conn.close()
    if result:
        title, content_html = result
        docx_bytes = pypandoc.convert_text(content_html, 'docx', format='html')
        return send_file(
            io.BytesIO(docx_bytes),
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            as_attachment=True,
            download_name=f"{title}.docx"
        )
    flash('Note not found', 'error')
    return redirect(url_for('user_uploads', username=session['username']))

if __name__ == '__main__':
    init_db()
    app.run(debug=True)